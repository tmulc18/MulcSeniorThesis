View(A)
get.adjacency(karate
)
V(g)
size(V(g))
length(V(g))
x<-c(1:length(V(g)))
x
A*x
A[[1,]]
A
A[1,]
A[1,A != 0]
A[1,A== 0]
A[1,A[]== 0]
A[1,A[1,]== 0]
A[1,A[1,]!= 0]
A[4,A[4,]!= 0]
length(A[1,A[1,]!= 0])
length(A[4,A[4,]!= 0])
sum(A[1,])
sum(A[4,])
centr<-c()
centr(1)<-1
centr[1]<-1
centr[2]<-1
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
for(i = 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-sum(A[i,])/row_len
}
return centr
}
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
for(i = 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-sum(A[i,])/row_len
}
return centr
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-sum(A[i,])/row_len
}
return(centr)
}
myClustering(g)
x<-as.vector(c(1:length(V(g))))
x
x<-t(c(1:length(V(g))))
x
A*x
A.x
x<-c(1:length(V(g)))
x
A.x
A*x
A%*%x
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-A%*%x/row_len
}
return(centr)
}
myClustering(g)
A*x
A
x
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len[i]<-length(A[i,A[i,]!= 0])
centr[i]/row_len[i]
}
return(centr)
}
myClustering(g)
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-centr[i]/row_len
}
return(centr)
}
myClustering(g)
centr<-t(centr)
centr
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-centr[i]/row_len
}
centr<-t(centr)
thresh<-sd(centr)
return(centr)
}
myClustering(g)
hist(myClustering(g))
hist(myClustering(g), breaks = 10)
hist(myClustering(g), breaks = 13)
hist(myClustering(g))
kmeans([1,1,1,1,1,2,2,2,2])
kmeans(c(1,1,1,1,1,2,2,2,2))
kmeans(c(1,1,1,1,1,2,2,2,2),2)
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-centr[i]/row_len
}
centr<-t(centr)
centr<-as.vector(centr)
result<-kmeans(centr,2)
result
result
result[2]
result[1]
result[3]
result[4]
result[5]
result[6]
result[7]
result[8]
result[9]
result[10]
result[11]
result[5]/result[6]
result[6]
result[5]
.375/28.125
1-.375/28.125
betwss<-result[5]
totss<-result[6]
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-betwss/totss
Ratio<-0
k<-0
centr<-as.vector(centr)
for(j in length(V(g)):1){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
V(g)
length(V(g))
centr
length(centr)
distinct(centr)
unique(centr)
for(j in length(unique(centr)):1){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
k
ratio
Ratio<-0
k<-0
centr<-as.vector(centr)
for(j in length(unique(centr)):2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
k
ratio
Ratio
Ratio<-0
k<-0
centr<-as.vector(centr)
for(j in length(unique(centr)):2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-1-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
k
Ratio
result<-kmeans(centr,k)
result
Ratio<-0
k<-0
centr<-as.vector(centr)
for(j in length(unique(centr))-1:2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-1-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
result<-kmeans(centr,k)
result
result[5]
deg(g)
degree(g)
results[1]
result[1]
source('~/Rose_Classes/MathThesis/clusterScript.R', echo=TRUE)
plot(myClustering(g),g)
cluster_walktrap(g)
wc
wc$groups
wc$group
wc[1]
wc[2]
wc_test<-c(c(1,2,3,4),c(5,6,7,8))
wc_test[1]
wc_test<-c(c(1,2,3,4),c(5,6,7,8),nrows=2)
wc_test[1]
wc_test[2]
wc_test$1<-c(1,2,3,4)
library(dplyr)
library(dplry)
library(dplyr)
help(plot)
wc_test<list(c(1,2,3,4),c(5,6,7,8))
wc_test<list(c(1,2,3,4),c(5,6,7,8),2)
K_result[1]
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-centr[i]/row_len
}
#kmeans
Ratio<-0
k<-0
centr<-as.vector(centr)
degree(g)
for(j in length(unique(centr))-1:2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-1-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
K_result<-kmeans(centr,k)
return(K_result[1])
}
plot()
g_clust<-myClusting(g)
g_clust<-myClustering(g)
g_clust
help(list())
help(list)
wc_test<list(x=c(1,2,3,4),y=c(5,6,7,8))
wc_test<list(x=c(1,2,3,4),y=c(5,6,7,8),2)
wc_test<-new.env()
wc_test$1<-c(1,2,3,4)
wc_test$a<-c(1,2,3,4)
wc_test$b<-c(5,6,7,8)
as.list(wc_test)
plot(wc_test,g)
plot(as.list(wc_test),g)
plot(g,mark.groups = as.list(wc_test))
wc_test$'1'<-c(1,2,3,4)
wc_test$'2'<-c(5,6,7,8)
plot(g,mark.groups = as.list(wc_test))
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-centr[i]/row_len
}
#kmeans
Ratio<-0
k<-0
centr<-as.vector(centr)
degree(g)
for(j in length(unique(centr))-1:2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-1-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
K_result<-kmeans(centr,k)
cluster<-K_result[1]
a
Ratio<-0
k<-0
centr<-as.vector(centr)
degree(g)
for(j in length(unique(centr))-1:2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-1-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
K_result<-kmeans(centr,k)
cluster<-K_result[1]
unique(cluster)
cluster
unique(cluster)
length(unique(cluster))
length(unique(cluster))
cluster<-K_result[1]
cluster
length(unique(cluster))
cluster<-K_result[1]
length(unique(cluster))
unique(cluster)
unique(cluster[1])
unique(cluster[2])
unique(cluster[[1]])
str(1)
as.string(1)
as.str(1)
toString(1)
final<-new.env()
source('~/Rose_Classes/MathThesis/clusterScript.R', echo=TRUE)
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-centr[i]/row_len
}
#kmeans
Ratio<-0
k<-0
centr<-as.vector(centr)
degree(g)
for(j in length(unique(centr))-1:2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-1-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
K_result<-kmeans(centr,k)
cluster<-K_result[1]
final<-new.env()
myClustering <- function(g){
centr<-c()
A<-as.matrix(get.adjacency(g))
x<-c(1:length(V(g)))
centr<-A%*%x
for(i in 1:length(V(g))){
row_len<-length(A[i,A[i,]!= 0])
centr[i]<-centr[i]/row_len
}
#kmeans
Ratio<-0
k<-0
centr<-as.vector(centr)
degree(g)
for(j in length(unique(centr))-1:2){
result<-kmeans(centr,j)
betwss<-as.numeric(result[5])
totss<-as.numeric(result[6])
ratio<-1-betwss/totss
if(ratio>Ratio){
Ratio<-ratio
k<-j
}
}
K_result<-kmeans(centr,k)
cluster<-K_result[1]
final<-new.env()
for(j in unique(cluster[[1]])){
for(k in 1:length(V(g))){
if(cluster[k] == j){
final$toString(j)<-c(final$toString(j),k)
}
}
}
return(final)
}
g_clust<-myClustering(g)
rm(g_clust)
g_clust<-myClustering(g)
source('~/.active-rstudio-document', echo=TRUE)
myClustering(g)
j = 2
final<-new.env()
final$toString(j)
toString(j)
final$toString(j)
final$toString(j)<-c(2)
source('~/Rose_Classes/MathThesis/clusterScript.R', echo=TRUE)
g_clust<-myClustering(g)
myClustering(g)
plot(g)
wc_test<-new.env()
wc_test$'1'<-c(1,2,3,4)
wc_test$'2'<-c(5,6,7,8)
plot(g,mark.groups = as.list(wc_test))
karate <- make_graph("Zachary")
wc <- cluster_walktrap(karate)
modularity(wc)
membership(wc)
plot(wc, karate)
help(cluster_walktrap)
library(multiplex)
install.packages("multiplex")
library(multiplex)
version
g2<-read.gml('football.gml')
getwd()
g2<-read.gml('/home/mulctv/Rose_Classes/MathThesis/football.gml')
View(`g2`)
plot(g2)
g2<-read.graph('/home/mulctv/Rose_Classes/MathThesis/football.gml')
g2<-read.graph('/home/mulctv/Rose_Classes/MathThesis/football.gml', format ="gml")
plot(g2)
wc3<-cluster_walktrap(g2)
plot(wc3,g2)
plot(wc3,g2,layout=layout.kamada.kawai)
wc4<-cluster_fast_greedy(g2)
plot(wc4,g2,layout=layout.kamada.kawai)
source('~/Rose_Classes/MathThesis/clusterScript.R', echo=TRUE)
x = matrix(c(1,2,3,4,5,6), ncol = 3)
View(x)
x = matrix(c(1,2,3,4,5,6), nrow = 2)
View(x)
x = matrix(c(1,2,3,4,5,6), nrow = 2, by.row = TRUE)
x = matrix(c(1,2,3,4,5,6), nrow = 2, byrow = TRUE)
x
View(x)
x%*%t(x)
solve(inv(x%*%t(x)))
solve(x%*%t(x))
g<-x%*%t(x)
g_inv <-solve(g)
26*1322
+24*70
source('~/.active-rstudio-document', echo=TRUE)
g = simplify(g,remove.multiple=TRUE, remove.loops = FALSE)
V(g)
E(g)
source('~/Rose_Classes/MathThesis/Amazon/amazon_graph_import.R', echo=TRUE)
setwd('/home/mulctv/Rose_Classes/MathThesis/Amazon/')
library(igraph)
dat<-read.csv('petEdges.csv',header=TRUE)
colnames(dat)<-NULL
el=as.matrix(dat)
el[,1]=as.character(el[,1])
el[,2]=as.character(el[,2])
g=graph.edgelist(el,directed=FALSE)
g = simplify(g,remove.multiple=TRUE, remove.loops = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
